// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include "stdafx.h"
#include "butemgr.h"


#if defined(_DEBUG)
	#define new DEBUG_NEW
#endif

const int nLineBufferSize = 256;  // Increase this to a large value to buffer the input.

/////////////////////////////////////////////////////////////////////
//
//  This is a templet header for a scanner using a scan table
//  produced by scangen
//
/////////////////////////////////////////////////////////////////////


////////////////////////////////////
// Token Defines

const int EofTok		= 1;
const int TagBegTok     = 2;
const int TagEndTok     = 3;
const int IdTok         = 4;
const int EqualTok		= 5;
const int PosIntegerTok = 6;
const int NegIntegerTok = 7;
const int DoubleTok     = 8;
const int StringTok		= 9;
const int RectTok       = 10;
const int PointTok      = 11;
const int VectorTok     = 12;
const int RangeTok      = 13;
const int CastDwordTok  = 14;
const int CastByteTok   = 17;
const int CastFloatTok  = 15;
const int FloatTok      = 16;
const int BoolTok       = 18;

//
////////////////////////////////////



#define Error        0
#define MoveAppend   1
#define MoveNoAppend 2
#define HaltAppend   3
#define HaltNoAppend 4
#define HaltReuse    5


/////////////////////////////////////////////////////////////////////
//
//  Include here the output of scangen <tables>
//
#define NumStates        101
#define StartState       18
#define NumClasses       51
#define NumReservedWords 2
#define NumLists         1

static short ClassMap[] = {
    51,50,50,50,50,50,50,50,50,17,14,50,50,15,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,16,45,19,39,48,47,18,44,
    20,21,22,23,37,24,25,26,13,13,13,13,13,13,13,13,13,13,27,28,
    29,30,31,49,42,8,10,12,1,5,6,12,12,12,12,12,7,12,12,3,
    12,12,4,12,9,12,12,2,12,11,12,32,43,33,46,38,41,8,10,12,
    1,5,6,12,12,12,12,12,7,12,12,3,12,12,4,12,9,12,12,2,
    12,11,12,34,36,35,40,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,
    50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0
};

// This table is provided to assist in making a reserved word
// search routine; it provides no functionality
//
// Major    4     Token for which this is an exception
// Minor    0
// FirstRSW 1     First index into the table
// LastRSW  2     Last index into the table
//
class CReservedWords
{

public:

    class CReservedWord
    {
    public:
        CReservedWord() { }
        CReservedWord( char const* name, int token, int tokenMinor)
        {
            m_name = name;
            m_token = token;
            m_tokenMinor = tokenMinor;
        }

        CString m_name;
        int m_token;
        int m_tokenMinor;
    };

    // Used to define map of strings to CSymTabItems.
    typedef std::unordered_map< char const*, CReservedWord, ButeMgrHashCompare, ButeMgrHashCompare > ReservedWordMap;

    CReservedWords()
    {
		m_reservedWords["FALSE"] = CReservedWord( "FALSE", 18, 0 );
		m_reservedWords["TRUE"] = CReservedWord( "TRUE", 18, 1 );
    }

	~CReservedWords( )
	{
	}

    CReservedWord const* Lookup( char const* pszName )
    {
		CReservedWord const* pReservedWord = NULL;

		// Find the item in the table of items.
		ReservedWordMap::iterator iter = m_reservedWords.find( pszName );

		// Check if item was found.
		if( iter != m_reservedWords.end( ))
		{
			pReservedWord = &(*iter).second;
		}

        return pReservedWord;
    }

    ReservedWordMap m_reservedWords;

} static s_reservedWords;

struct TranType {
    short ActionType;  // The action to perform for this character.
    short A;           // The next state,  each line in the TransTable is a state.
    short B;           // This is m_tokenMinor.  It doesn't get used in the TransTable.
};

static TranType TransTable[NumStates][NumClasses] = {
    {{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{1,0,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0},{5,4,0}},
    {{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,1,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{1,45,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{1,0,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0}},
    {{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{2,2,0},{2,2,0},{2,2,0},{2,2,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0},{5,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,100,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,6,0},{1,6,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{1,54,0},{5,2,0},{5,2,0},{1,70,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{1,81,0},{1,81,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0},{5,2,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,98,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,11,0},{1,11,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,100,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{1,19,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0},{5,9,0}},
    {{5,7,0},{5,7,0},{5,7,0},{5,7,0},{1,47,0},{3,16,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{1,8,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{1,45,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0},{5,7,0}},
    {{5,8,0},{5,8,0},{5,8,0},{5,8,0},{1,47,0},{3,16,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{1,9,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,99,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,98,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,97,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,93,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,14,0},{1,14,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,93,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,15,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,92,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,16,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,50,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,17,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,49,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,0,0},{1,1,0},{2,2,0},{2,2,0},{2,2,0},{2,2,0},{0,0,0},{2,19,0},{1,25,0},{0,0,0},{0,0,0},{1,42,0},{1,43,0},{0,0,0},{2,68,0},{0,0,0},{0,0,0},{1,44,0},{3,5,0},{0,0,0},{1,4,0},{3,3,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,1,0}},
    {{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{0,0,0},{0,0,0},{1,19,0},{1,19,0},{1,19,0},{2,7,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{1,19,0},{0,0,0}},
    {{5,6,0},{5,6,0},{5,6,0},{5,6,0},{1,47,0},{3,16,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{1,20,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{1,45,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0},{5,6,0}},
    {{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{5,0,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{1,21,0},{5,0,0}},
    {{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{3,16,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{1,22,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0},{5,8,0}},
    {{0,0,0},{1,26,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,24,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,71,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{1,23,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,31,0},{0,0,0},{0,0,0},{0,0,0},{1,39,0},{0,0,0},{0,0,0},{1,46,0},{0,0,0},{0,0,0},{1,25,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,60,0},{1,60,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{1,28,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{1,78,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{1,27,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,83,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,29,0},{0,0,0},{0,0,0},{1,24,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,48,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,71,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{1,33,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,30,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,76,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,36,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,83,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,34,0},{0,0,0},{0,0,0},{1,24,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,71,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,32,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,79,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,96,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,37,0},{0,0,0},{0,0,0},{1,88,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,52,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,12,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,96,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,38,0},{0,0,0},{0,0,0},{1,88,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,12,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,35,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,40,0},{0,0,0},{0,0,0},{1,94,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,51,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,41,0},{0,0,0},{0,0,0},{1,94,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,20,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,8,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,29,0},{0,0,0},{0,0,0},{1,44,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,58,0},{1,58,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,9,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,59,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,46,0},{0,0,0},{0,0,0},{1,53,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,61,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,22,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,62,0},{1,62,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,34,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,63,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,40,0},{0,0,0},{0,0,0},{1,49,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,64,0},{1,64,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,37,0},{0,0,0},{0,0,0},{1,50,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,65,0},{1,65,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,41,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,66,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,38,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,67,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,53,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,61,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,5,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,54,0},{0,0,0},{0,0,0},{1,17,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,74,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,49,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,3,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,55,0},{0,0,0},{0,0,0},{1,16,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,75,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,50,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,5,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,56,0},{0,0,0},{0,0,0},{1,17,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,49,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,3,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,57,0},{0,0,0},{0,0,0},{1,16,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,50,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,29,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,9,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,46,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,72,0},{0,0,0},{0,0,0},{1,61,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,89,0},{1,89,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,22,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,34,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,40,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,37,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,41,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,38,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,86,0},{0,0,0},{0,0,0},{0,0,0},{2,21,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,69,0},{2,86,0},{2,86,0},{2,86,0},{4,0,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{0,0,0}},   // Comment mode.
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,54,0},{0,0,0},{0,0,0},{1,70,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,81,0},{1,81,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,55,0},{0,0,0},{0,0,0},{1,71,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,82,0},{1,82,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,72,0},{0,0,0},{0,0,0},{1,77,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,11,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,91,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,73,0},{0,0,0},{0,0,0},{1,80,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,10,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,56,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,84,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,57,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,85,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,76,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,17,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,77,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,11,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,91,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,78,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,14,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,79,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,15,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,80,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,10,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,54,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,55,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,97,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,12,0},{1,12,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,56,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,57,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,69,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{2,86,0},{0,0,0}},  // Comment mode.
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,87,0},{0,0,0},{0,0,0},{1,88,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,12,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,88,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,12,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,72,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,73,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,99,0},{0,0,0},{0,0,0},{1,91,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,10,0},{1,10,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,73,0},{0,0,0},{0,0,0},{1,92,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,90,0},{1,90,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,93,0},{0,0,0},{0,0,0},{1,94,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,94,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,13,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,87,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,87,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,95,0},{1,95,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,97,0},{0,0,0},{0,0,0},{1,24,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,71,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,98,0},{0,0,0},{0,0,0},{1,17,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,49,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,99,0},{0,0,0},{0,0,0},{1,15,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,92,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
    {{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,100,0},{0,0,0},{0,0,0},{1,16,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,50,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}}
};
//
/////////////////////////////////////////////////////////////////////



CButeMgr::CButeMgr()
{
	m_decryptCode = 0;
	m_checksum = 0;
	m_lineNumber = 0;
	m_bLineCounterFlag = true;

	m_bSuccess = false;
	m_bErrorFlag = false;
	// m_sErrorString

	m_pDisplayFunc = NULL;

	// TableOfItems
	// TableOfTags

	// m_stringHolder
	// m_tagTab
	// m_auxTagTab
	// m_newTagTab

	m_pCurrTabOfItems = 0;

	m_pData = 0;
	m_pSaveData = 0;

	m_szLineBuffer = 0;
	m_szLineBufferPtr = 0;

	m_currentChar = 0;
	m_token = 0;
	m_tokenMinor =  0;

	m_szTokenString[0] = 0;

	m_sTagName.Empty();
	m_sAttribute.Empty();
	m_sAttributeFilename.Empty();

	m_bPutChar = false;
	m_bCrypt = false;
	// m_cryptMgr


	m_RectBank.Init( 8, 0 );
	m_PointBank.Init( 8, 0 );
	m_AVectorBank.Init( 8, 0 );
	m_ARangeBank.Init( 8, 0 );
	m_SymTabItemBank.Init( 64, 0 );
}


bool CButeMgr::TraverseTableOfItemsDeleteSymTab( char const* pszAttName, CSymTabItem& theSymTab, void* pContext )
{
	CButeMgr* pButeMgr = ( CButeMgr* )pContext;

	pButeMgr->m_SymTabItemBank.Free( &theSymTab );
	return true;
}

bool CButeMgr::TraverseTableOfTagsDeleteSymTab( char const* pszTagName, TableOfItems& theTableOfItems,
											   void* pContext )
{
	TraverseTableOfItems( theTableOfItems, TraverseTableOfItemsDeleteSymTab, pContext );
	return true;
}

CButeMgr::~CButeMgr()
{
	Term( );
}


void CButeMgr::Reset()
{
	m_checksum = 0;
	m_lineNumber = 0;
	m_bLineCounterFlag = true;
	m_bErrorFlag = false;
	m_sTagName = "";
	m_sAttribute = "";

	if( m_szLineBuffer )
		*m_szLineBuffer = 0;

	m_szLineBufferPtr = m_szLineBuffer;
}



void CButeMgr::Init()
{
	Term( );
}



void CButeMgr::Init(void (*pF)(const char* szMsg))
{
	m_pDisplayFunc = pF;
}


void CButeMgr::Term( )
{
	// Traverse the items of the tags and delete them.
	TraverseTableOfTags( m_tagTab, TraverseTableOfTagsDeleteSymTab, this );

	// Remove all the tableofitems from the tag table
	{
		TableOfTags::iterator iter = m_tagTab.begin( );
		while( iter != m_tagTab.end( ) )
		{
			// Get the tag data.
			TableOfItems* pTableOfItems = (*iter).second;
			if( pTableOfItems )
			{
				delete pTableOfItems;
			}

			iter++;
		}
	}

	m_tagTab.clear();

	TraverseTableOfTags( m_auxTagTab, TraverseTableOfTagsDeleteSymTab, this );

	// Remove all the tableofitems from the aux tag table
	{
		TableOfTags::iterator iter = m_auxTagTab.begin( );
		while( iter != m_auxTagTab.end( ) )
		{
			// Get the tag data.
			TableOfItems* pTableOfItems = (*iter).second;
			if( pTableOfItems )
			{
				delete pTableOfItems;
			}

			iter++;
		}
	}

	m_auxTagTab.clear();

	TraverseTableOfTags( m_newTagTab, TraverseTableOfTagsDeleteSymTab, this );
	//m_tagTab.clear();
	//m_auxTagTab.clear();

	// Remove all the tableofitems from the new tag table
	{
		TableOfTags::iterator iter = m_newTagTab.begin( );
		while( iter != m_newTagTab.end( ) )
		{
			// Get the tag data.
			TableOfItems* pTableOfItems = (*iter).second;
			if( pTableOfItems )
			{
				delete pTableOfItems;
			}

			iter++;
		}
	}

	m_newTagTab.clear();
	//m_stringHolder.clear();

	m_RectBank.Init( 8, 0 );
	m_PointBank.Init( 8, 0 );
	m_AVectorBank.Init( 8, 0 );
	m_ARangeBank.Init( 8, 0 );
	m_SymTabItemBank.Init( 64, 0 );

	m_stringHolder.clear();

	delete[] m_szLineBuffer;
	m_szLineBuffer = 0;
	m_szLineBufferPtr = 0;
}


void CButeMgr::ConsumeChar()
{
	int c;

	if( !m_szLineBuffer && nLineBufferSize > 0)
	{
		m_szLineBuffer = new char[nLineBufferSize];
		m_szLineBufferPtr = m_szLineBuffer;
		memset(m_szLineBuffer, 0, nLineBufferSize);
	}

	if( m_szLineBuffer )
	{
		// Do we need to refresh our buffer?
		if( !m_szLineBufferPtr || !*m_szLineBufferPtr || m_szLineBufferPtr >= m_szLineBuffer + nLineBufferSize )
		{
			if (m_pData->eof())
			{
				m_currentChar = 0;
				return;
			}

			m_pData->read(m_szLineBuffer,nLineBufferSize-1);  // don't use getline!

			ASSERT( m_pData->gcount() < nLineBufferSize );

			// terminate the string.
			m_szLineBuffer[ m_pData->gcount() ] = 0;

			m_szLineBufferPtr = m_szLineBuffer;
		}

		ASSERT( m_szLineBufferPtr );

		// Grab the next character from our buffer.
		c = *m_szLineBufferPtr++;
	}
	else
	{
		// We're not using buffers, just get
		// one character at a time.
		c = m_pData->get();

		if (m_pData->eof())
		{
			m_currentChar = 0;
			return;
		}
	}

	c -= m_decryptCode;


	if (m_bLineCounterFlag)
		++m_lineNumber;
	if (c == '\n')
		m_bLineCounterFlag = true;
	else
		m_bLineCounterFlag = false;

    m_currentChar = static_cast<unsigned char>(c);
	m_checksum += c;
}



short CButeMgr::CharClass(unsigned char currentChar)
{
    //if (ClassMap[(unsigned int)currentChar] == 0)
		//DisplayMessage("ButeMgr (%d):  Illegal character encountered in attribute file.", m_lineNumber);
    return ClassMap[(unsigned int)currentChar] - 1;
}



short CButeMgr::Action(short State, unsigned char currentChar)
{
    return TransTable[State][CharClass(currentChar)].ActionType;
}



short CButeMgr::NextState(short State, unsigned char currentChar)
{
    return TransTable[State][CharClass(currentChar)].A;
}





void CButeMgr::LookupCodes(short State, unsigned char currentChar)
{
    m_token = TransTable[State][CharClass(currentChar)].A;
    m_tokenMinor = TransTable[State][CharClass(currentChar)].B;

	if (m_token == IdTok)
	{
		CReservedWords::CReservedWord const* p = s_reservedWords.Lookup(m_szTokenString);
		if (p)
		{
			m_token = static_cast<short>(p->m_token);
			m_tokenMinor = static_cast<short>(p->m_tokenMinor);
		}
	}
}





bool CButeMgr::ScanTok()
{
    short State = StartState;
    static short Pos;

    Pos = 0;
    for(;;)
	{
        switch (Action(State, m_currentChar))
		{
			case Error:
				DisplayMessage("Bad symbol encountered.", m_lineNumber);
				return false;
			case MoveAppend:
				State = NextState(State, m_currentChar);
				m_szTokenString[Pos++] = m_currentChar;
				if (m_pSaveData && m_bPutChar && m_currentChar)
					*m_pSaveData << m_currentChar;
				ConsumeChar();
				break;
			case MoveNoAppend:
				State = NextState(State, m_currentChar);
				if (m_pSaveData && m_bPutChar && m_currentChar)
					*m_pSaveData << m_currentChar;
				ConsumeChar();
				break;
			case HaltAppend:
				LookupCodes(State, m_currentChar);
				m_szTokenString[Pos++] = m_currentChar;
				if (m_pSaveData && m_bPutChar && m_currentChar)
					*m_pSaveData << m_currentChar;
				ConsumeChar();
				if (m_token == 0)
					ScanTok();
				m_szTokenString[Pos] = '\0';
				return true;
			case HaltNoAppend:
				LookupCodes(State, m_currentChar);
				if (m_pSaveData && m_bPutChar && m_currentChar)
					*m_pSaveData << m_currentChar;
				ConsumeChar();
				if (m_token == 0)
					ScanTok();
				m_szTokenString[Pos] = '\0';
				return true;
			case HaltReuse:
				m_szTokenString[Pos] = '\0';
				LookupCodes(State, m_currentChar);
				if (m_token == 0)
					ScanTok();
				return true;
        }
    }

#if 0
	return true;
#endif // 0
}





void CButeMgr::DisplayMessage(const char* szMsg, ...)
{
	va_list v;
	va_start(v, szMsg);
	char aMsgBuffer[2048];
	_vsnprintf(aMsgBuffer, sizeof(aMsgBuffer), szMsg, v);
	m_sErrorString.Format("ButeMgr (%s, %d):  %s", static_cast<LPCTSTR>(m_sAttributeFilename), m_lineNumber, aMsgBuffer);

//	TRACE("%s\n", (m_sErrorString.GetBuffer(0)));
	if (m_pDisplayFunc)
		(*m_pDisplayFunc)(m_sErrorString.GetBuffer(0));
}




bool CButeMgr::Match(int Tok)
{
	if (!ScanTok())
		return false;
	if (m_token != Tok)
	{
		DisplayMessage("A formatting error in the attribute file was encountered");
		return false;
	}
	return true;
}





bool CButeMgr::Statement()
{
	int left, top, right, bottom;
	int x, y;
	double i, j, k;
	double doubleValue;
	float floatValue;
	int intValue;
	DWORD dwordValue;
	BYTE byteValue;
	bool boolValue;
	char **endptr = NULL;
	bool bDuplicate = false;

	m_sAttribute = m_szTokenString;

	if (!m_pSaveData && FindSymTabItem( *m_pCurrTabOfItems, m_sAttribute ))
	{
		DisplayMessage("duplicate symbol encountered - %s", m_sAttribute.GetBuffer(0));
		bDuplicate = true;
	}

	if (!Match(EqualTok))
		return false;


	if (m_pSaveData)
	{
		m_bPutChar = false;
		*m_pSaveData << ' ';
	}

	if (!ScanTok())
		return false;

	switch (m_token)
	{
		case PosIntegerTok:
		case NegIntegerTok:
			intValue = atoi(m_szTokenString);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, IntType, intValue );
				}
			}
			else
			{
				intValue = GetInt(m_sTagName, m_sAttribute);
				*m_pSaveData << intValue;
			}
			break;
		case CastDwordTok:
			if (!Match(PosIntegerTok))
				return false;
			dwordValue = strtoul(m_szTokenString, endptr, 10);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, DwordType, dwordValue );
				}
			}
			else
			{
				dwordValue = GetDword(m_sTagName, m_sAttribute);
				*m_pSaveData << "(DWORD)" << dwordValue;
			}
			break;
		case CastByteTok:
			if (!Match(PosIntegerTok))
				return false;
			byteValue = static_cast<BYTE>(atoi(m_szTokenString));
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, ByteType, byteValue );
				}
			}
			else
			{
				byteValue = GetByte(m_sTagName, m_sAttribute);
				*m_pSaveData << "(BYTE)" << (DWORD)byteValue;
			}
			break;
		case BoolTok:
			boolValue = m_tokenMinor == 1;
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, BoolType, boolValue );
				}
			}
			else
			{
				boolValue = GetBool(m_sTagName, m_sAttribute);
				if (boolValue)
					*m_pSaveData << "TRUE";
				else
					*m_pSaveData << "FALSE";
			}
			break;
		case CastFloatTok:
			if (!Match(DoubleTok))
				return false;
			floatValue = (float)atof(m_szTokenString);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, FloatType, floatValue );
				}
			}
			else
			{
				floatValue = GetFloat(m_sTagName, m_sAttribute);
				*m_pSaveData << "(FLOAT)" << floatValue;
			}
			break;
		case FloatTok:
			floatValue = (float)atof(m_szTokenString);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, FloatType, floatValue );
				}
			}
			else
			{
				floatValue = GetFloat(m_sTagName, m_sAttribute);
				*m_pSaveData << floatValue << "f";
			}
			break;
		case DoubleTok:
			doubleValue = atof(m_szTokenString);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, DoubleType, doubleValue );
				}
			}
			else
			{
				doubleValue = GetDouble(m_sTagName, m_sAttribute);
				*m_pSaveData << doubleValue;
			}
			break;
		case RectTok:
			sscanf(m_szTokenString, "(%d, %d, %d, %d)", &left, &top, &right, &bottom);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, RectType, CRect(left, top, right, bottom) );
				}
			}
			else
			{
				CRect rc = GetRect(m_sTagName, m_sAttribute);
				*m_pSaveData << "(" << rc.left << ", " << rc.top << ", " << rc.right << ", " << rc.bottom << ")";
			}

			break;
		case PointTok:
			sscanf(m_szTokenString, "(%d, %d)", &x, &y);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, PointType, CPoint(x, y) );
				}
			}
			else
			{
				CPoint pt = GetPoint(m_sTagName, m_sAttribute);
				*m_pSaveData << "(" << pt.x << ", " << pt.y << ")";
			}
			break;
		case VectorTok:
			sscanf(m_szTokenString, "<%lf, %lf, %lf>", &i, &j, &k);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, VectorType, CAVector(i, j, k) );
				}
			}
			else
			{
				CAVector v = GetVector(m_sTagName, m_sAttribute);
				*m_pSaveData << "<" << v.Geti() << ", " << v.Getj() << ", " << v.Getk() << ">";
			}
			break;
		case RangeTok:
			sscanf(m_szTokenString, "[%lf, %lf]", &i, &j);
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, RangeType, CARange(i, j) );
				}
			}
			else
			{
				CARange range = GetRange(m_sTagName, m_sAttribute);
				*m_pSaveData << "[" << range.GetMin() << ", " << range.GetMax() << "]";
			}
			break;
		case StringTok:
			if (!m_pSaveData)
			{
				if (!bDuplicate)
				{
					CSymTabItem* pSymTabItem = CreateSymTabItem( *m_pCurrTabOfItems, m_sAttribute );
					if( pSymTabItem )
						pSymTabItem->Init( *this, StringType, m_szTokenString );
				}
			}
			else
			{
				CString s = GetString(m_sTagName, m_sAttribute);
				s.Replace("\"", "\"\"");
				*m_pSaveData << '"' << s.GetBuffer(0) << '"';
			}
			break;
		default:
			DisplayMessage("Invalid token encountered.");
			return false;
			break;
	}

	if (m_pSaveData)
		m_bPutChar = true;
	return true;
}



bool CButeMgr::StatementList()
{
	for (;;)
	{
		if (!Statement())
			return false;
		if (!ScanTok())
			return  false;

		if (m_token == TagBegTok || m_token == EofTok)
			return true;
		else if (m_token != IdTok)
			return false;
	}

#if 0
	return true;
#endif // 0
}



bool CButeMgr::Tag()
{
	if (!Match(IdTok))
		return false;
	m_sTagName = m_szTokenString;
	if (!m_pSaveData)
	{
		if( FindTableOfItems( m_tagTab, m_szTokenString ))
		{
			DisplayMessage("Duplicate tag encountered - %s", m_szTokenString);
			return false;
		}

		m_pCurrTabOfItems = CreateTableOfItems( m_tagTab, m_szTokenString );
	}
	if (!Match(TagEndTok))
		return false;

	return true;
}







bool CButeMgr::AuxTabItemsSave( char const* pszAttName, CSymTabItem& theItem, void* pContext )
{
	std::ofstream* pSaveData = (std::ofstream*)pContext;

	*pSaveData << "\r\n" << pszAttName << " = ";

	switch (theItem.SymType)
	{
	case IntType:
		*pSaveData << theItem.data.i;
		break;
	case DwordType:
		*pSaveData << "(DWORD)" << theItem.data.dw;
		break;
	case ByteType:
		*pSaveData << "(BYTE)" << (DWORD)theItem.data.byte;
		break;
	case BoolType:
		if (theItem.data.b)
			*pSaveData << "TRUE";
		else
			*pSaveData << "FALSE";
		break;
	case FloatType:
		*pSaveData << theItem.data.f << 'f';
		break;
	case DoubleType:
		*pSaveData << theItem.data.d;
		break;
	case StringType:
		{
			CString s = *theItem.data.s;
			s.Replace("\"", "\"\"");
			*pSaveData << '"' << s << '"';
			break;
		}
	case RectType:
		*pSaveData << '(' << theItem.data.r->left << ", " << theItem.data.r->top << ", " << theItem.data.r->right << ", " << theItem.data.r->bottom << ')';
		break;
	case PointType:
		*pSaveData << "(" << theItem.data.point->x << ", " << theItem.data.point->y << ")";
		break;
	case VectorType:
		*pSaveData << "<" << theItem.data.v->Geti() << ", " << theItem.data.v->Getj() << ", " << theItem.data.v->Getk() << ">";
		break;
	case RangeType:
		*pSaveData << "[" << theItem.data.range->GetMin() << ", " << theItem.data.range->GetMax() << "]";
		break;
	}

	return true;
}



bool CButeMgr::NewTabsSave( const char* pszTagName, TableOfItems& theTabOfItems, void* pContext )
{
	std::ofstream* pSaveData = (std::ofstream*)pContext;

	*pSaveData << "\r\n\r\n" << "[" << pszTagName << "]";

	TraverseTableOfItems( theTabOfItems, AuxTabItemsSave, pSaveData );

	return true;
}





bool CButeMgr::TagList()
{
	ConsumeChar(); // Get things rolling
	if (!ScanTok())
		return false;
	if (m_token == EofTok)
		return true;
	else if (m_token != TagBegTok)
		return false;
	while (m_token != EofTok)
	{
		if(!Tag())
			return false;

		if (m_pSaveData) // Add new items if saving
		{
			TableOfItems* pTableOfItems = FindTableOfItems( m_auxTagTab, m_sTagName );
			if( pTableOfItems )
			{
				TraverseTableOfItems( *pTableOfItems, AuxTabItemsSave, m_pSaveData );
			}
		}
		if (!ScanTok())
			return false;

		if (m_token == EofTok)
			return true;

		if (m_token == TagBegTok)
			continue;

		if (m_token != IdTok)
			return false;

		if (!StatementList())
			return false;
	}
	return true;
}

bool CButeMgr::Save(
    const char* szNewFileName)
{
    Reset();

    if (m_sAttributeFilename.IsEmpty() && !szNewFileName)
        return false;

    m_bPutChar = true;

    char buf[4096];

    if (m_sAttributeFilename.GetBuffer() == NULL)
        m_sAttributeFilename = "";

    std::ifstream is(m_sAttributeFilename, std::ios_base::binary);

    long nFileLength = 0;
    if (is.is_open()) {
        is.seekg(0, std::ios_base::end);
        nFileLength = static_cast<long>(is.tellg());
    }

    if (nFileLength == 0)
        nFileLength = 1;

    is.clear();
    is.seekg(0);

    // Create the buffer.
    char *pssBuf = new char[nFileLength];
    pssBuf[0] = '\0';

    std::stringstream ss;

    if (m_bCrypt) {
        m_cryptMgr.Decrypt(is, ss);
        m_pSaveData = new std::stringstream();
    } else {
        if (is.is_open()) {
            while (!is.eof()) {
                is.read(buf, 4096);
                ss.write(buf, is.gcount());
            }
        }

        is.close();

        if (szNewFileName)
            m_pSaveData = new std::fstream(szNewFileName, std::ios_base::binary | std::ios_base::in | std::ios_base::out | std::ios_base::trunc);
        else
            m_pSaveData = new std::fstream(m_sAttributeFilename, std::ios_base::binary | std::ios_base::in | std::ios_base::out | std::ios_base::trunc);
    }

    if (m_pSaveData->fail()) {
        delete m_pSaveData;
        m_pSaveData = NULL;

        // Delete the buffer.
        delete[] pssBuf;
        pssBuf = NULL;

        m_bPutChar = false;

        return false;
    }

    m_pSaveData->flags(m_pSaveData->flags() | std::ios_base::showpoint | std::ios_base::fixed);

    ss.clear();
    m_pData = &ss;

    TagList();

    // add new tag items
    TraverseTableOfTags(m_newTagTab, NewTabsSave, m_pSaveData);

    m_pSaveData->clear();
    if (m_bCrypt) {
        auto file_name = (
            szNewFileName ?
            szNewFileName :
            static_cast<const char*>(m_sAttributeFilename));

        std::ofstream stream(file_name, std::ios_base::binary);

        m_cryptMgr.Encrypt(*m_pSaveData, stream);
    }

    // Delete the buffer.
    delete[] pssBuf;
    pssBuf = NULL;

    if (m_bCrypt)
        delete m_pSaveData->rdbuf();
    delete m_pSaveData;
    m_pSaveData = NULL;

    m_bPutChar = false;

    return true;
}

bool CButeMgr::Exist(const char* szTagName, const char* szAttName)
{
	// Find the table of items in the auxiliary tag table.
	TableOfItems* pTabOfItems = FindTableOfItems( m_auxTagTab, szTagName );

	// Check if we found the table of items.
	if( pTabOfItems )
	{
		// If no attribute name is provided, then we're just checking the tag.
		if (!szAttName)
			return true;

		// Find the symtabitem.
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, szAttName );
		if (pItem)
			return true;
	}

	// Find the table of items in the main tag table.
	pTabOfItems = FindTableOfItems( m_tagTab, szTagName );

	// Check if we found the table of items.
	if( pTabOfItems )
	{
		// If no attribute name is provided, then we're just checking the tag.
		if (!szAttName)
			return true;

		// Find the symtabitem.
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, szAttName );
		if (pItem)
			return true;
	}

	// Find the table of items in the new tag table.
	pTabOfItems = FindTableOfItems( m_newTagTab, szTagName );

	// Check if we found the table of items.
	if( pTabOfItems )
	{
		// If no attribute name is provided, then we're just checking the tag.
		if (!szAttName)
			return true;

		// Find the symtabitem.
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, szAttName );
		if (pItem)
			return true;
	}

	// Tag or Tag+AttName not found.
	return false;
}


bool CButeMgr::GetTagsTraverseFunc( char const* pszTagName, TableOfItems& theTableOfItems, void* pContext )
{
	GetTagsData* pGetTagsData = ( GetTagsData* )pContext;
	GetTagsCallback theCallbackFunc = pGetTagsData->m_pCallback;
	return theCallbackFunc( pszTagName, pGetTagsData->m_pContext );
}



void CButeMgr::GetTags( GetTagsCallback pCallback, void* pContext )
{
	GetTagsData data( pCallback, pContext );
	TraverseTableOfTags( m_tagTab, GetTagsTraverseFunc, &data );
	TraverseTableOfTags( m_auxTagTab, GetTagsTraverseFunc, &data );
	TraverseTableOfTags( m_newTagTab, GetTagsTraverseFunc, &data );
}


bool CButeMgr::GetKeysTraverseFunc( char const* pszAttName, CSymTabItem& theItem, void* pContext )
{
	GetKeysData* pGetKeysData = ( GetKeysData* )pContext;
	GetKeysCallback theCallbackFunc = pGetKeysData->m_pCallback;
	return theCallbackFunc( pszAttName, &theItem, pGetKeysData->m_pContext );
}



void CButeMgr::GetKeys( const char* pszTagName, GetKeysCallback pCallback, void* pContext )
{
	TableOfItems* pTableOfItems;

	GetKeysData data( pCallback, pContext );

	pTableOfItems = FindTableOfItems( m_tagTab, pszTagName );
	if( pTableOfItems )
		TraverseTableOfItems( *pTableOfItems, GetKeysTraverseFunc, &data );
	pTableOfItems = FindTableOfItems( m_auxTagTab, pszTagName );
	if( pTableOfItems )
		TraverseTableOfItems( *pTableOfItems, GetKeysTraverseFunc, &data );
	pTableOfItems = FindTableOfItems( m_newTagTab, pszTagName );
	if( pTableOfItems )
		TraverseTableOfItems( *pTableOfItems, GetKeysTraverseFunc, &data );
}




CButeMgr::SymTypes CButeMgr::GetType(const char* szTagName, const char* szAttName)
{
	m_bSuccess = true;
	CSymTabItem* pItem;

	pItem = FindSymTabItem( szTagName, szAttName );
	if( !pItem )
	{
		m_bSuccess = false;
		return NullType;
	}

	return pItem->SymType;
}

////////////////////////////////////////////////////////////////////////
//
// CButeMgr::AddString
//
// Return:		CString const&	- String added to list.
// Argument:	char const* pszString - String to add to the list.
//
// Description:	Adds a string to the string list.  A pointer to the newly
//				added string is returned.  Use this pointer, because its
//				lifetime is guaranteed.
//
////////////////////////////////////////////////////////////////////////
CString const& CButeMgr::AddString( char const* pszString )
{
	// Add the string to the string holder.
	std::pair< StringHolder::const_iterator, bool > pr = m_stringHolder.insert( CString( pszString ) );

	// pr.first is a pointer to a CString.  So, dereferance and return the CString.
	return *pr.first;
}


////////////////////////////////////////////////////////////////////////
//
// CButeMgr::CreateTableOfItems
//
// Return:		CButeMgr::TableOfItems*	- New table of items.
// Argument:	TableOfTags& tableOfTags	- table of tags to add to.
// Argument:	const char* szTagName	- Tag name to add.
//
// Description:	Adds a new TableOfItems to a TableOfTags.
//
////////////////////////////////////////////////////////////////////////
CButeMgr::TableOfItems* CButeMgr::CreateTableOfItems( TableOfTags& tableOfTags, char const* pszTagName )
{
	// Check inputs.
	if( !pszTagName )
		return NULL;

	// Create a new table of items.
	TableOfItems* pTableOfItems = new TableOfItems;
	if( !pTableOfItems )
		return NULL;

	// Add the string to the string list and use it with the tableOfTags map.  This string pointer
	// will persist for the life of this ButeMgr object.
	char const* pszTagString = AddString( pszTagName );

	// Add the table of items to the table of tags.
	tableOfTags[pszTagString] = pTableOfItems;

	// Return the table of items we created.
	return pTableOfItems;
}

////////////////////////////////////////////////////////////////////////
//
// CButeMgr::FindTableOfItems
//
// Return:		CButeMgr::TableOfItems*	- Found TableOfItems
// Argument:	TableOfTags& tableOfTags - table of tags to look in.
// Argument:	const char* pszTagName - Tag to search with.
//
// Description:	Finds a pre-existing TableOfItems in a TableOfTags
//
////////////////////////////////////////////////////////////////////////
CButeMgr::TableOfItems* CButeMgr::FindTableOfItems( TableOfTags& tableOfTags, char const* pszTagName )
{
	// Check inputs.
	if( !pszTagName )
		return NULL;

	// Assume table not found.
	TableOfItems* pTableOfItems = NULL;

	// Find the item in the table of items.
	TableOfTags::iterator iter = tableOfTags.find( pszTagName );

	// Check if item was found.
	if( iter != tableOfTags.end( ))
	{
		pTableOfItems = (*iter).second;
	}

	// Return what we found.
	return pTableOfItems;
}

////////////////////////////////////////////////////////////////////////
//
// CButeMgr::CreateSymTabItem
//
// Return:		CButeMgr::CSymTabItem*	- New symtabitem.
// Argument:	TableOfItems& tableOfItems	- table of items to add to.
// Argument:	const char* pszAttName - Attribute name to add.
//
// Description:	Adds a new CSymTablItem to a TableOfItems.
//
////////////////////////////////////////////////////////////////////////
CButeMgr::CSymTabItem* CButeMgr::CreateSymTabItem( TableOfItems& tableOfItems, char const* pszAttName )
{
	// Check inputs.
	if( !pszAttName )
		return NULL;

	// Create a new symtab.
	CSymTabItem* pSymTabItem = m_SymTabItemBank.Allocate( );
	if( !pSymTabItem )
		return NULL;

	// Add the string to the string list and use it with the tableOfItems map.  This string pointer
	// will persist for the life of this ButeMgr object.
	char const* pszItemString = AddString( pszAttName );

	// Add the symtab to the table of tags.
	tableOfItems[pszItemString] = pSymTabItem;

	// Return the item we created.
	return pSymTabItem;
}

////////////////////////////////////////////////////////////////////////
//
// CButeMgr::FindSymTabItem
//
// Return:		CButeMgr::CSymTabItem*	- Found symtabitem.
// Argument:	TableOfItems& tableOfItems	- table of items to look in.
// Argument:	const char* pszAttName - Attribute name to search with.
//
// Description:	Finds a pre-existing CSymTabItem in a TableOfItems
//
////////////////////////////////////////////////////////////////////////
CButeMgr::CSymTabItem* CButeMgr::FindSymTabItem( TableOfItems& tableOfItems, char const* pszAttName )
{
	// Check inputs.
	if( !pszAttName )
		return NULL;

	// Assume item not found.
	CSymTabItem* pItem = NULL;

	// Find the item in the table of items.
	TableOfItems::iterator iter = tableOfItems.find( pszAttName );

	// Check if item was found.
	if( iter != tableOfItems.end( ))
	{
		pItem = (*iter).second;
	}

	// Return what we found.
	return pItem;
}

////////////////////////////////////////////////////////////////////////
//
// CButeMgr::FindSymTabItem
//
// Return:		CButeMgr::CSymTabItem*	- Found symtabitem.
// Argument:	const char* pszTagName	- Tag to find.
// Argument:	const char* pszAttName - Attribute name to search with.
//
// Description:	Finds a pre-existing CSymTabItem in any of the table of tags.
//
////////////////////////////////////////////////////////////////////////
CButeMgr::CSymTabItem* CButeMgr::FindSymTabItem( char const* pszTagName, char const* pszAttName )
{
	// Check inputs.
	if( !pszTagName || !pszAttName )
	{
		ASSERT( FALSE );
		return NULL;
	}

	TableOfItems* pTabOfItems;

	pTabOfItems = FindTableOfItems( m_tagTab, pszTagName );
	if( pTabOfItems )
	{
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, pszAttName );
		if (pItem)
			return pItem;
	}
	pTabOfItems = FindTableOfItems( m_auxTagTab, pszTagName );
	if( pTabOfItems )
	{
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, pszAttName );
		if (pItem)
			return pItem;
	}
	pTabOfItems = FindTableOfItems( m_newTagTab, pszTagName );
	if( pTabOfItems )
	{
		CSymTabItem* pItem = FindSymTabItem( *pTabOfItems, pszAttName );
		if (pItem)
			return pItem;
	}

	return NULL;
}



////////////////////////////////////////////////////////////////////////
//
// CButeMgr::GetSymTabItem
//
// Return:		CButeMgr::CSymTabItem* - Item associated with szTagName & szAttName
// Argument:	const char* szTagName - Tag name to find.
// Argument:	const char* szAttName - Attribute in szTagName to find.
//
// Description:	Looks through the main table of tags.  If tag is found, then
//				looks for attribute.  If attribute found, then returns CSymTabItem.
//				If tag found, but attribute isn't found, then it looks in the auxiliary
//				tagtable.  It will create a new TableOfItems if tag isn't found in the
//				auxiliary table.  If neither the tag nor the attribute were found in the
//				main tagtable, it looks in the new tagtable.  It will create a new TableOfItems
//				if not found there.
//
////////////////////////////////////////////////////////////////////////
CButeMgr::CSymTabItem* CButeMgr::GetSymTabItem( const char* pszTagName, const char* pszAttName )
{
	// Check inputs.
	if( !pszTagName || !pszAttName )
		return NULL;

	// Default to not finding or creating the item.
	CSymTabItem* pItem = NULL;

	// Find table of items in main tag table.
	TableOfItems* pTabOfItems = FindTableOfItems( m_tagTab, pszTagName );
	if( pTabOfItems )
	{
		// Find attribute in table of items.
		pItem = FindSymTabItem( *pTabOfItems, pszAttName );

		// If not found, then create or find it in the auxiliary table.
		if( !pItem )
		{
			// Find table of items in auxiliary table.
			pTabOfItems = FindTableOfItems( m_auxTagTab, pszTagName );

			// Check if we found the table of items.
			if( pTabOfItems )
			{
				// Find the attribute in the table of items.
				pItem = FindSymTabItem( *pTabOfItems, pszAttName );

				// If we didn't find the attribute, then we need to add it here.
				if( !pItem )
				{
					pItem = CreateSymTabItem( *pTabOfItems, pszAttName );
				}
			}
			// We didn't find the TableOfItems in the auxiliary table.  We need to make
			// a new TableOfItems and a CSymTabItem.
			else
			{
				// Create the new TableOfItems.
				TableOfItems* pTableOfItems = CreateTableOfItems( m_auxTagTab, pszTagName );
				if( !pTableOfItems )
					return NULL;

				// Create the new CSymTabItem.
				pItem = CreateSymTabItem( *pTableOfItems, pszAttName );
			}
		}
	}
	// TableOfItems didn't exist in the main TableOfTags.  Now check the new tag table.
	else
	{
		// Find the TableOfItems in the new tag table.
		pTabOfItems = FindTableOfItems( m_newTagTab, pszTagName );

		// Check if we found the TableOfItems.
		if( pTabOfItems )
		{
			// Find the CSymTabItem in the TableOfItems.
			pItem = FindSymTabItem( *pTabOfItems, pszAttName );

			// If we didn't find the item, we need to add it.
			if( !pItem )
			{
				// Create a new CSymTabItem.
				pItem = CreateSymTabItem( *pTabOfItems, pszAttName );
			}
		}
		// We didn't find the TableOfItems, so we need to add a new one and then add a new CSymTabItem to it.
		else
		{
			TableOfItems* pTableOfItems = CreateTableOfItems( m_newTagTab, pszTagName );
			if( !pTableOfItems )
				return NULL;

			// Create the new SymTabItem.
			pItem = CreateSymTabItem( *pTableOfItems, pszAttName );
		}
	}

	// Return the found or newly created item.
	return pItem;
}


int CButeMgr::GetInt(const char* szTagName, const char* szAttName, int defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == IntType)
			return (pItem->data.i);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}

	m_bSuccess = false;
	return defVal;
}



int CButeMgr::GetInt(const char* szTagName, const char* szAttName)
{
	int nRet = GetInt( szTagName, szAttName, INT_MIN );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return nRet;
}




void CButeMgr::SetInt(const char* szTagName, const char* szAttName, int val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, IntType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





DWORD CButeMgr::GetDword(const char* szTagName, const char* szAttName, DWORD defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		switch (pItem->SymType)
		{
		case DwordType:
			return (pItem->data.dw);
		default:
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
		}
	}

	m_bSuccess = false;
	return defVal;
}



DWORD CButeMgr::GetDword(const char* szTagName, const char* szAttName)
{
	DWORD nRet = GetDword( szTagName, szAttName, 0 );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return nRet;
}




void CButeMgr::SetDword(const char* szTagName, const char* szAttName, DWORD val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, DwordType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





BYTE CButeMgr::GetByte(const char* szTagName, const char* szAttName, BYTE defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		switch (pItem->SymType)
		{
		case ByteType:
			return (pItem->data.byte);
		default:
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
		}
	}

	m_bSuccess = false;
	return defVal;
}



BYTE CButeMgr::GetByte(const char* szTagName, const char* szAttName)
{
	BYTE nRet = GetByte( szTagName, szAttName, 0 );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return nRet;
}




void CButeMgr::SetByte(const char* szTagName, const char* szAttName, BYTE val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, ByteType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





bool CButeMgr::GetBool(const char* szTagName, const char* szAttName, bool defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		switch (pItem->SymType)
		{
		case BoolType:
			return (pItem->data.b);
		default:
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
		}
	}

	m_bSuccess = false;
	return defVal;
}






bool CButeMgr::GetBool(const char* szTagName, const char* szAttName)
{
	bool bRet = GetBool( szTagName, szAttName, 0 );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return bRet;
}




void CButeMgr::SetBool(const char* szTagName, const char* szAttName, bool val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, BoolType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}







float CButeMgr::GetFloat(const char* szTagName, const char* szAttName, float defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		switch (pItem->SymType)
		{
		case FloatType:
			return (pItem->data.f);
		case IntType:
			return (float)((pItem->data.i));
		default:
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
		}
	}

	m_bSuccess = false;
	return defVal;
}


float CButeMgr::GetFloat(const char* szTagName, const char* szAttName)
{
	float fRet = GetFloat( szTagName, szAttName, FLT_MIN );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return fRet;
}





void CButeMgr::SetFloat(const char* szTagName, const char* szAttName, float val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, FloatType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}






double CButeMgr::GetDouble(const char* szTagName, const char* szAttName, double defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		switch (pItem->SymType)
		{
		case DoubleType:
			return (pItem->data.d);
		case IntType:
			return (double)((pItem->data.i));
		default:
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
		}
	}

	m_bSuccess = false;
	return defVal;
}


double CButeMgr::GetDouble(const char* szTagName, const char* szAttName)
{
	double fRet = GetDouble( szTagName, szAttName, DBL_MIN );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return fRet;
}





void CButeMgr::SetDouble(const char* szTagName, const char* szAttName, double val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, DoubleType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





const char *CButeMgr::GetString(const char* szTagName, const char* szAttName, const char *defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == StringType)
			return *(pItem->data.s);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}

	m_bSuccess = false;
	return defVal;
}


const char *CButeMgr::GetString(const char* szTagName, const char* szAttName)
{
	const char *pRet = GetString( szTagName, szAttName, "" );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return pRet;
}

void CButeMgr::GetString(const char* szTagName, const char* szAttName, const char* defVal, char *szResult, DWORD maxLen)
{
	if (!szResult || !maxLen)
		return;

	const char *pRet = GetString( szTagName, szAttName, defVal );
	if( !m_bSuccess && !defVal )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	if( m_bSuccess )
	{
		uint32 nLength = strlen( pRet );
		if ( nLength < ( int )maxLen )
			maxLen = nLength + 1;
		strncpy(szResult, pRet, maxLen);
	}
	else if (defVal)
	{
		strncpy(szResult, defVal, maxLen);
	}
}

void CButeMgr::GetString(const char* szTagName, const char* szAttName, char *szResult, DWORD maxLen)
{
	if (!szResult || !maxLen)
		return;

	GetString( szTagName, szAttName, "", szResult, maxLen );
}


void CButeMgr::SetString(const char* szTagName, const char* szAttName, const char *val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, StringType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





CRect& CButeMgr::GetRect(const char* szTagName, const char* szAttName, CRect& defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == RectType)
			return *(pItem->data.r);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}
	m_bSuccess = false;
	return defVal;
}



CRect& CButeMgr::GetRect(const char* szTagName, const char* szAttName)
{
	static CRect defVal(0, 0, 0, 0);
	CRect& rect = GetRect( szTagName, szAttName, defVal );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return rect;
}





void CButeMgr::SetRect(const char* szTagName, const char* szAttName, const CRect& val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, RectType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





CPoint& CButeMgr::GetPoint(const char* szTagName, const char* szAttName, CPoint& defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == PointType)
			return *(pItem->data.point);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}
	m_bSuccess = false;
	return defVal;
}



CPoint& CButeMgr::GetPoint(const char* szTagName, const char* szAttName)
{
	static CPoint defVal(0, 0);
	CPoint& point = GetPoint( szTagName, szAttName, defVal );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return point;
}





void CButeMgr::SetPoint(const char* szTagName, const char* szAttName, const CPoint& val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, PointType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}





CAVector& CButeMgr::GetVector(const char* szTagName, const char* szAttName, CAVector& defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == VectorType)
			return *(pItem->data.v);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}
	m_bSuccess = false;
	return defVal;
}



CAVector& CButeMgr::GetVector(const char* szTagName, const char* szAttName)
{
	static CAVector defVal(0, 0, 0);
	CAVector& vect = GetVector( szTagName, szAttName, defVal );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return vect;
}





void CButeMgr::SetVector(const char* szTagName, const char* szAttName, const CAVector& val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, VectorType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}






CARange& CButeMgr::GetRange(const char* szTagName, const char* szAttName, CARange& defVal)
{
	m_bSuccess = true;
	CSymTabItem* pItem = FindSymTabItem(szTagName, szAttName);
	if (pItem)
	{
		if (pItem->SymType == RangeType)
			return *(pItem->data.range);
		else
			DisplayMessage("Type mismatch - [%s]:%s", szTagName, szAttName);
	}
	m_bSuccess = false;
	return defVal;
}



CARange& CButeMgr::GetRange(const char* szTagName, const char* szAttName)
{
	static CARange defVal(0, 0);
	CARange& range = GetRange( szTagName, szAttName, defVal );
	if( !m_bSuccess )
		DisplayMessage("Symbol not found - [%s]:%s", szTagName, szAttName);

	return range;
}




void CButeMgr::SetRange(const char* szTagName, const char* szAttName, const CARange& val)
{
	CSymTabItem* pItem = GetSymTabItem( szTagName, szAttName );
	if( pItem )
	{
		m_bSuccess = true;
		pItem->Init( *this, RangeType, val);
	}
	else
	{
		m_bSuccess = false;
	}
}

bool CButeMgr::AddTag(const char *szTagName)
{
	TableOfItems* pTabOfItems;

	// Default to success.
	m_bSuccess = true;

	// See if the tag exists in the main tag table.
	pTabOfItems = FindTableOfItems( m_tagTab, szTagName );
	if( pTabOfItems )
	{
		return true;
	}

	// See if the tag exists in the auxiliary tag table.
	pTabOfItems = FindTableOfItems( m_auxTagTab, szTagName );
	if( pTabOfItems )
	{
		return true;
	}

	// See if the tag exists in the new tag table.
	pTabOfItems = FindTableOfItems( m_newTagTab, szTagName );
	if( pTabOfItems )
	{
		return true;
	}

	// Create the tag in the new tag table.
	pTabOfItems = CreateTableOfItems( m_newTagTab, szTagName );
	if( pTabOfItems )
		return true;

	m_bSuccess = false;
	return false;
}

void CButeMgr::TraverseTableOfItems( TableOfItems& tableOfItems, TraverseTableOfItemsCallback pCb, void* pContext )
{
	// Check inputs.
	if( !pCb )
		return;

	// Traverse the items.
	TableOfItems::iterator iter = tableOfItems.begin( );
	while( iter != tableOfItems.end( ))
	{
		// Get the tag data.
		CSymTabItem* pSymTabItem = (*iter).second;
		if( pSymTabItem )
		{
			// Call the callback.  If it returns false, then stop iterating.
			// The iterator's first memeber will be a pointer to a CString.
			if( !pCb( (*iter).first, *pSymTabItem, pContext ))
				break;
		}

		iter++;
	}
}


void CButeMgr::TraverseTableOfTags( TableOfTags& tableOfTags, TraverseTableOfTagsCallback pCb, void* pContext )
{
	// Check inputs.
	if( !pCb )
		return;

	// Traverse the tags.
	TableOfTags::iterator iter = tableOfTags.begin( );
	while( iter != tableOfTags.end( ))
	{
		// Get the tag data.
		TableOfItems* pTableOfItems = (*iter).second;
		if( pTableOfItems )
		{
			// Call the callback.  If it returns false, then stop iterating.
			// The iterator's first memeber will be a pointer to a CString.
			if( !pCb( (*iter).first, *pTableOfItems, pContext ))
				break;
		}

		// Go to next item.
		iter++;
	}
}
